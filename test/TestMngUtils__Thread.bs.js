// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Test = require("rescript-test/src/Test.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var $$Promise = require("@ryyppy/rescript-promise/src/Promise.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var MngUtils__Thread = require("../src/MngUtils__Thread.bs.js");
var TestMngUtils__Thread__Compute = require("./TestMngUtils__Thread__Compute.bs.js");
var TestMngUtils__Thread__Compute__Matrix = require("./TestMngUtils__Thread__Compute__Matrix.bs.js");

Test.testAsync("Internals.run", 10000, (function (cb) {
        var asyncFun = async function (param) {
          var compute = {
            InputTransfer: TestMngUtils__Thread__Compute.InputTransfer,
            ResultTransfer: TestMngUtils__Thread__Compute.ResultTransfer,
            _MODULE_NAME: TestMngUtils__Thread__Compute._MODULE_NAME,
            _ABSOLUTE_PATH: TestMngUtils__Thread__Compute._ABSOLUTE_PATH,
            compute: TestMngUtils__Thread__Compute.compute
          };
          var result;
          try {
            result = await MngUtils__Thread.run([
                  1,
                  2,
                  3,
                  4
                ], compute, 4);
          }
          catch (exn){
            throw exn;
          }
          if (result.length !== 4) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "TestMngUtils__Thread.res",
                    14,
                    4
                  ],
                  Error: new Error()
                };
          }
          if (Caml_array.get(result, 0) !== "1") {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "TestMngUtils__Thread.res",
                    15,
                    4
                  ],
                  Error: new Error()
                };
          }
          if (Caml_array.get(result, 1) !== "2") {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "TestMngUtils__Thread.res",
                    16,
                    4
                  ],
                  Error: new Error()
                };
          }
          if (Caml_array.get(result, 2) !== "3") {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "TestMngUtils__Thread.res",
                    17,
                    4
                  ],
                  Error: new Error()
                };
          }
          if (Caml_array.get(result, 3) === "4") {
            return ;
          }
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "TestMngUtils__Thread.res",
                  18,
                  4
                ],
                Error: new Error()
              };
        };
        $$Promise.$$catch(asyncFun(undefined).then(function (param) {
                  Curry._2(cb, undefined, undefined);
                }), (function (err) {
                console.log("error: ", err);
                return Promise.resolve(undefined);
              }));
      }));

Test.testAsync("matrix compute", 60000, (function (cb) {
        var asyncFunc = async function (param) {
          var compute = {
            InputTransfer: TestMngUtils__Thread__Compute__Matrix.InputTransfer,
            ResultTransfer: TestMngUtils__Thread__Compute__Matrix.ResultTransfer,
            _MODULE_NAME: TestMngUtils__Thread__Compute__Matrix._MODULE_NAME,
            _ABSOLUTE_PATH: TestMngUtils__Thread__Compute__Matrix._ABSOLUTE_PATH,
            compute: TestMngUtils__Thread__Compute__Matrix.compute
          };
          var result = await MngUtils__Thread.run([
                30000,
                30000,
                30000,
                30000
              ], compute, 4);
          if (result.length !== 4) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "TestMngUtils__Thread.res",
                    41,
                    4
                  ],
                  Error: new Error()
                };
          }
          Belt_Array.forEach(result, (function (item) {
                  console.log("thread time use: " + String(item) + "ms");
                }));
          var __x = TestMngUtils__Thread__Compute__Matrix.compute(30000);
          console.log("time use in main thread: ", __x);
          var __x$1 = TestMngUtils__Thread__Compute__Matrix.compute(30000);
          console.log("time use in main thread: ", __x$1);
          var __x$2 = TestMngUtils__Thread__Compute__Matrix.compute(30000);
          console.log("time use in main thread: ", __x$2);
          var __x$3 = TestMngUtils__Thread__Compute__Matrix.compute(30000);
          console.log("time use in main thread: ", __x$3);
        };
        $$Promise.$$catch(asyncFunc(undefined).then(function (param) {
                  Curry._2(cb, undefined, undefined);
                }), (function (err) {
                console.log("error: ", err);
                return Promise.resolve(undefined);
              }));
      }));

/*  Not a pure module */
